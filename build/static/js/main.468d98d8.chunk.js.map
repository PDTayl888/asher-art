{"version":3,"sources":["components/home.jsx","components/navBar.jsx","components/image.jsx","firebase.js","components/asherGallery.jsx","components/korynGallery.jsx","components/ellieGallery.jsx","components/notFound.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","Component","NavBar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Image","src","key","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","AsherGallery","useState","url","setUrl","imageArray","useEffect","forEach","item","ref","child","getDownloadURL","then","fireUrl","currentState","catch","error","console","log","map","index","KorynGallery","EllieGallery","NotFound","App","Fragment","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.468d98d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return <h1>HOME !!!!!!!!!!!</h1>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n// saveUrlsToDb() {\r\n//   const files = fileInput.files;\r\n\r\n//   const promises = [];\r\n\r\n//   for(let i=0; i < files.length; i++) {\r\n//     let files = files[i];\r\n\r\n//     promises.push(uploadAndSavePromise(file));\r\n//   }\r\n//   promises.all(promises);\r\n// }\r\n\r\n// uploadAndSavePromise(file) {\r\n//   const storageRef = firebase.storage().ref();\r\n//    const fileName = file.name\r\n//    // Remove extension\r\n//    const trimmedFileName = fileName.slice(0, -4)\r\n\r\n//    const imageRef = storageRef.child('test/'+fileName);\r\n\r\n//   return imageRef.put(file).then(function(snapshot) {\r\n\r\n//       db.collection(\"maincollection\").doc(trimmedFileName).set({\r\n//       imageURL: snapshot.downloadURL,\r\n//       })\r\n//   }\r\n\r\n// }\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// const navStyle = {\r\n//   backgroundImage: `url(${process.env.PUBLIC_URL}/images/head_band.jpg)`,\r\n//   color: 'white'\r\n// };\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className='navbar navbar-expand-lg'>\r\n      <button\r\n        className='navbar-toggler'\r\n        type='button'\r\n        data-toggle='collapse'\r\n        data-target='#navbarNavAltMarkup'\r\n        aria-controls='navbarNavAltMarkup'\r\n        aria-expanded='false'\r\n        aria-label='Toggle navigation'\r\n      >\r\n        <span className='navbar-toggler-icon'></span>\r\n      </button>\r\n      <div className='collapse navbar-collapse' id='navbarNavAltMarkup'>\r\n        <div className='navbar-nav'>\r\n          <NavLink className='nav-item nav-link' to='/asher'>\r\n            Asher's Gallery\r\n          </NavLink>\r\n          <NavLink className='nav-item nav-link' to='/ellie'>\r\n            Ellie's Gallery\r\n          </NavLink>\r\n          <NavLink className='nav-item nav-link' to='/koryn'>\r\n            Koryn's Gallery\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst Image = ({ id, src }) => {\r\n  return <img className='zoom' key={id} src={src} alt={id}></img>;\r\n};\r\n\r\nexport default Image;\r\n\r\n// https://ichef.bbci.co.uk/news/976/cpsprodpb/AECD/production/_107894744_alien976.jpg\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyAB_iJ-z7EW94q9Cr0Lx3FN-1hQlqEp9z4',\r\n  authDomain: 'family-gallery-d94d4.firebaseapp.com',\r\n  databaseURL: 'https://family-gallery-d94d4.firebaseio.com',\r\n  projectId: 'family-gallery-d94d4',\r\n  storageBucket: 'family-gallery-d94d4.appspot.com',\r\n  messagingSenderId: '78423075896',\r\n  appId: '1:78423075896:web:d7118ef90d0521b8db8acd',\r\n  measurementId: 'G-LJD15CVNN7'\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nconst storage = firebase.storage();\r\n\r\nexport { storage, firebase as default };\r\n","import React, { useState, useEffect } from 'react';\r\nimport Image from './image';\r\nimport { storage } from '../firebase.js';\r\n\r\nconst AsherGallery = () => {\r\n  const [url, setUrl] = useState([]);\r\n\r\n  const [imageArray] = useState([\r\n    'awesome.jpg',\r\n    'emo.jpg',\r\n    'head_band.jpg',\r\n    'naruto.jpg',\r\n    'sideways.jpg',\r\n    'versus.jpg',\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    imageArray.forEach((item) => {\r\n      storage\r\n        .ref(`Asher/`)\r\n        .child(`${item}`)\r\n        .getDownloadURL()\r\n        .then((fireUrl) => {\r\n          setUrl((currentState) => [...currentState, fireUrl]);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='gallery-container'>\r\n      {url.map((item, index) => (\r\n        <div className='image'>\r\n          {' '}\r\n          <Image id={index} src={item} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AsherGallery;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Image from './image';\r\nimport { storage } from '../firebase.js';\r\n\r\nconst KorynGallery = () => {\r\n  const [url, setUrl] = useState([]);\r\n\r\n  const [imageArray] = useState(['k_sal.jpg']);\r\n\r\n  useEffect(() => {\r\n    imageArray.forEach((item) => {\r\n      storage\r\n        .ref(`Koryn/`)\r\n        .child(`${item}`)\r\n        .getDownloadURL()\r\n        .then((fireUrl) => {\r\n          setUrl((currentState) => [...currentState, fireUrl]);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='gallery-container'>\r\n      {console.log(url)}\r\n      {url.map((item, index) => (\r\n        <div className='image'>\r\n          {' '}\r\n          <Image id={index} src={item} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KorynGallery;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Image from './image';\r\nimport { storage } from '../firebase.js';\r\n\r\nconst EllieGallery = () => {\r\n  const [url, setUrl] = useState([]);\r\n\r\n  const [imageArray] = useState(['ellie_bear.jpg', 'ellie_reggae.jpg']);\r\n\r\n  useEffect(() => {\r\n    imageArray.forEach((item) => {\r\n      storage\r\n        .ref(`Ellie/`)\r\n        .child(`${item}`)\r\n        .getDownloadURL()\r\n        .then((fireUrl) => {\r\n          setUrl((currentState) => [...currentState, fireUrl]);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='gallery-container'>\r\n      {console.log(url)}\r\n      {url.map((item, index) => (\r\n        <div className='image'>\r\n          {' '}\r\n          <Image id={index} src={item} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EllieGallery;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1>NOT FOUND !!!!!!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Home from './components/home';\r\nimport NavBar from './components/navBar';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Route, Switch } from 'react-router-dom';\r\n// import { storage } from './firebase.js';\r\nimport AsherGallery from './components/asherGallery';\r\nimport KorynGallery from './components/korynGallery';\r\nimport EllieGallery from './components/ellieGallery';\r\nimport NotFound from './components/notFound';\r\n// import { firebase } from 'firebase/app';\r\n// test now\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <NavBar />\r\n        <main className='App'>\r\n          {/* {console.log('APP.JS URL: ', url)} */}\r\n          <Switch>\r\n            <Route path='/asher' component={AsherGallery} />\r\n            <Route path='/ellie' component={EllieGallery} />\r\n            <Route path='/koryn' component={KorynGallery} />\r\n            <Route path='/home' component={Home} />\r\n            <Route path='/not-found' component={NotFound} />\r\n            {/* <Redirect from='/' exact to='/home' />\r\n              <Redirect to='/not-found' /> */}\r\n          </Switch>\r\n        </main>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// (currentState) => [...currentState, fireUrl]\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}